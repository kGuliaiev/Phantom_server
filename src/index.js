import dotenv from 'dotenv';
dotenv.config();

import express                    from 'express';
import cors                       from 'cors';
import helmet                     from 'helmet';
import rateLimit                  from 'express-rate-limit';
import http                       from 'http';
import { Server }                 from 'socket.io';

import authRoutes                 from './routes/authRoutes.js';
import connectDB                  from './config/db.js';
import routes                     from './routes/index.js';
import contactRoutes              from './routes/contactRoutes.js';
import messageRoutes              from './routes/messageRoutes.js';
import { errorHandler, notFound } from './middlewares/errorMiddleware.js';
import { requestLogger }          from './middlewares/requestLogger.js';
import { handleConnection }       from './controllers/chatController.js';
import { v4 as uuidv4 }           from 'uuid'; // –î–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
import { onlineUsers }            from './utils/onlineUsers.js';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
connectDB();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: '*' }
});



// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ WebSocket –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
app.set('io', io); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä io –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö)

import jwt from 'jsonwebtoken';
import { getUserByIdentifierAndUsernameHash } from './controllers/userController.js';
// –ø–æ–∑–∂–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è: const Contact = (await import('./models/Contact.js')).default;

io.on('connection', (socket) => {
  socket.on('identify', async ({ identifier, usernameHash, token }) => {
    try {
      if (!token) return socket.disconnect(true);

      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default_jwt_secret');
      if (!decoded?.userId) return socket.disconnect(true);

      const user = await getUserByIdentifierAndUsernameHash(identifier, usernameHash);
      if (!user || user._id.toString() !== decoded.userId) return socket.disconnect(true);

      console.log(`üü¢ ${identifier} (${user.nickname}) ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ WebSocket (${socket.id})`);
      onlineUsers.set(identifier, {
        socketId: socket.id,
        nickname: user.nickname,
      });
      socket.user = { identifier };

      // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
      const Contact = (await import('./models/contact.js')).default;
      const owners = await Contact.find({ contactId: identifier }).select('owner').lean();
      const uniqueOwners = [...new Set(owners.map(o => o.owner.toString()))];
      console.log(`üì£ [Online Update] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${identifier} —Å–≤—è–∑–∞–Ω —Å:`, uniqueOwners);
 
      for (const owner of uniqueOwners) {
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${identifier} –æ–Ω–ª–∞–π–Ω -> ${owner}`);
        const target = onlineUsers.get(owner);
        if (target?.socketId) {
          io.to(target.socketId).emit('userOnline', { identifier, isOnline: true });
        }
      }
 
      const myContacts = await Contact.find({ owner: identifier }).select('contactId').lean();
      const connectedContacts = myContacts.map(c => c.contactId.toString());
      console.log(`üîó –ö–æ–Ω—Ç–∞–∫—Ç—ã ${identifier}:`, connectedContacts);
 
      const result = new Set();
      result.add(identifier); // –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      connectedContacts.forEach(cid => {
        if (onlineUsers.has(cid)) {
          result.add(cid);
        }
      });
      const finalResult = Array.from(result);
      console.log(`üü¢ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Ç–∞–∫—Ç—ã ${identifier}:`, finalResult);
      io.to(socket.id).emit('onlineUsers', finalResult);
 
      // ‚è±Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const intervalId = setInterval(() => {
        if (onlineUsers.has(identifier)) {
          for (const owner of uniqueOwners) {
            const target = onlineUsers.get(owner);
            if (target?.socketId) {
              io.to(target.socketId).emit('userOnline', { identifier, isOnline: true });
            }
          }
        }
      }, 10000);
      socket.data.intervalId = intervalId;

    } catch (err) {
      return socket.disconnect(true);
    }
  });

  socket.on('disconnect', async () => {
    if (!socket.user?.identifier) return;

    const identifier = socket.user.identifier;
    const userEntry = onlineUsers.get(identifier);
    if (!userEntry) return;

    if (socket.data.intervalId) {
      clearInterval(socket.data.intervalId);
    }

    onlineUsers.delete(identifier);

    const Contact = (await import('./models/contact.js')).default;
    const owners = await Contact.find({ contactId: identifier }).select('owner').lean();
    const uniqueOwners = [...new Set(owners.map(o => o.owner.toString()))];
   // console.log(`üì£ [Offline Update] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${identifier} –±—ã–ª —Å–≤—è–∑–∞–Ω —Å:`, uniqueOwners);
 
    for (const owner of uniqueOwners) {
      if (onlineUsers.has(owner)) {
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${identifier} –æ—Ñ—Ñ–ª–∞–π–Ω -> ${owner}`);
        const target = onlineUsers.get(owner);
        if (target?.socketId) {
          io.to(target.socketId).emit('userOnline', { identifier, isOnline: false });
        }
      }
    }

    console.log(`üî¥ ${identifier} (${userEntry.nickname}) ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å offline (${socket.id})`);
  });

  socket.on('chatClearedAck', ({ contactId, clearedBy, from }) => {
    console.log(`üì® chatClearedAck –ø–æ–ª—É—á–µ–Ω –æ—Ç ${from} (–æ—á–∏—â–µ–Ω–æ –¥–ª—è contactId=${contactId})`);
    // –ù–∞–π—Ç–∏ socketId —Ç–æ–≥–æ, –∫—Ç–æ –∏–Ω–∏—Ü–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ (clearedBy), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const target = onlineUsers.get(clearedBy);
    if (target?.socketId) {
      io.to(target.socketId).emit('chatClearedAck', { contactId, from });
    }
  });
  
});

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());
app.use(requestLogger);
app.use(cors());
app.use(helmet());

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (DDoS –∑–∞—â–∏—Ç–∞)
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  standardHeaders: true,
  legacyHeaders: false,
});
app.use('/api/', apiLimiter);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api',           routes);

app.use('/api/auth',      authRoutes);
app.use('/api/contacts',  contactRoutes);
app.use('/api/message',   messageRoutes);
//app.use('/api/key',       keyRoutes);
//app.use('/api/user',      userRoutes);
//app.use('/api/chat',      chatRoutes);


// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use(notFound);
app.use(errorHandler);

// WebSocket –æ–±—Ä–∞–±–æ—Ç–∫–∞

// –í—ã–≤–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// app._router.stack.forEach((r) => {
//   if (r.route && r.route.path) {
//     console.log(`–ú–∞—Ä—à—Ä—É—Ç: ${r.route.path} - –ú–µ—Ç–æ–¥—ã: ${Object.keys(r.route.methods)}`);
//   }
// });

const PORT = process.env.PORT || 5001;
server.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
