import dotenv from 'dotenv';
dotenv.config();

import express                    from 'express';
import cors                       from 'cors';
import helmet                     from 'helmet';
import rateLimit                  from 'express-rate-limit';
import http                       from 'http';
import jwt                        from 'jsonwebtoken';
import fs                         from 'fs';
import path                       from 'path';
import { Server }                 from 'socket.io';


import connectDB                  from './config/db.js';
import authRoutes                 from './routes/authRoutes.js';
import routes                     from './routes/index.js';
import contactRoutes              from './routes/contactRoutes.js';
import messageRoutes              from './routes/messageRoutes.js';

import { errorHandler, notFound } from './middlewares/errorMiddleware.js';
import { requestLogger }          from './middlewares/requestLogger.js';

import { getUserByIdentifierAndUsernameHash } from './controllers/userController.js';
import { handleConnection }       from './controllers/chatController.js';
import { v4 as uuidv4 }           from 'uuid';
import onlineUsers            from './utils/onlineUsers.js';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB
connectDB();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: '*' }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ WebSocket –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
app.set('io', io); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä io –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö)



function logWebSocketEvent(event, details) {
  const now = new Date().toISOString();
  const ip = details.ip || 'unknown';
  const logEntry = `[${now}][IP: ${ip}][File: index.js] EVENT: ${event} - ${JSON.stringify(details)}\n`;
  const logFilePath = path.join(process.cwd(), 'logs', 'websocket.log');
  fs.appendFileSync(logFilePath, logEntry);
}


// –ø–æ–∑–∂–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è: const Contact = (await import('./models/Contact.js')).default;

io.on('connection', (socket) => {

  
  socket.on('identify', async ({ identifier, usernameHash, token }) => {
    try {
      if (!token) return socket.disconnect(true);
  
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default_jwt_secret');
      if (!decoded?.userId) return socket.disconnect(true);
  
      const user = await getUserByIdentifierAndUsernameHash(identifier, usernameHash);
      if (!user || user._id.toString() !== decoded.userId) return socket.disconnect(true);
  
      //console.log(`üü¢ ${identifier} (${user.nickname}) ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ WebSocket (${socket.id})`);
      onlineUsers.set(identifier, {
        socketId: socket.id,
        nickname: user.nickname,
      });
      socket.user = { identifier };
  
      // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö...
      const Contact = (await import('./models/contact.js')).default;
      const owners = await Contact.find({ contactId: identifier }).select('owner').lean();
      const uniqueOwners = [...new Set(owners.map(o => o.owner.toString()))];
      //console.log(`üì£ [Online Update] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${identifier} —Å–≤—è–∑–∞–Ω —Å:`, uniqueOwners);
   
      for (const owner of uniqueOwners) {
        //console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${identifier} –æ–Ω–ª–∞–π–Ω -> ${owner}`);
        const target = onlineUsers.get(owner);
        if (target?.socketId) {
          io.to(target.socketId).emit('userOnline', { identifier, isOnline: true });
        }
      }
   
      const myContacts = await Contact.find({ owner: identifier }).select('contactId').lean();
      const connectedContacts = myContacts.map(c => c.contactId.toString());
      //console.log(`üîó –ö–æ–Ω—Ç–∞–∫—Ç—ã ${identifier}:`, connectedContacts);
   
      const result = new Set();
      result.add(identifier); // –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      connectedContacts.forEach(cid => {
        if (onlineUsers.has(cid)) {
          result.add(cid);
        }
      });
      const finalResult = Array.from(result);
      //console.log(`üü¢ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Ç–∞–∫—Ç—ã ${identifier}:`, finalResult);
      io.to(socket.id).emit('onlineUsers', finalResult);
   
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (global.messageBuffer && global.messageBuffer.has(identifier)) {
        const bufferedMessages = global.messageBuffer.get(identifier);
        bufferedMessages.forEach((message) => {
          io.to(socket.id).emit('message', {
            sender: message.senderId,
            encrypted: message.encryptedContent || message.encrypted,
            iv: message.iv,
            timestamp: message.timestamp,
            messageId: message.messageId
          });
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${message.messageId} –¥–ª—è ${identifier}`);
        });
        global.messageBuffer.delete(identifier);
      }
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (global.statusBuffer && global.statusBuffer.has(identifier)) {
        const bufferedStatuses = global.statusBuffer.get(identifier);
        bufferedStatuses.forEach((bufferedData) => {
          io.to(socket.id).emit('messageAttributeChanged', bufferedData);
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${identifier}:`, bufferedData);
        });
        global.statusBuffer.delete(identifier);
      }
      // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ onlineUsers –∏ onlineUsers —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç ACK 'delivered'
      const Message = (await import('./models/message.js')).default;
      const undelivered = await Message.find({
        'recipients.userId': identifier,
        'recipients.status': 'sent'
      });
      for (const msg of undelivered) {
        io.to(socket.id).emit('message', {
          sender: msg.senderId,
          encrypted: msg.encryptedContent,
          iv: msg.iv,
          timestamp: msg.timestamp,
          messageId: msg.messageId
        });
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${msg.messageId} –¥–ª—è ${identifier}`);
      }
   
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–æ–Ω–ª–∞–π–Ω"
      const intervalId = setInterval(() => {
        if (onlineUsers.has(identifier)) {
          for (const owner of uniqueOwners) {
            const target = onlineUsers.get(owner);
            if (target?.socketId) {
              io.to(target.socketId).emit('userOnline', { identifier, isOnline: true });
            }
          }
        }
      }, 10000);
      socket.data.intervalId = intervalId;
  
    } catch (err) {
      return socket.disconnect(true);
    }
  });


  socket.on('disconnect', async () => {
    if (!socket.user?.identifier) return;

    const identifier = socket.user.identifier;
    const userEntry = onlineUsers.get(identifier);
    if (!userEntry) return;

    if (socket.data.intervalId) {
      clearInterval(socket.data.intervalId);
    }

    onlineUsers.delete(identifier);

    const Contact = (await import('./models/contact.js')).default;
    const owners = await Contact.find({ contactId: identifier }).select('owner').lean();
    const uniqueOwners = [...new Set(owners.map(o => o.owner.toString()))];
   // console.log(`üì£ [Offline Update] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${identifier} –±—ã–ª —Å–≤—è–∑–∞–Ω —Å:`, uniqueOwners);
 
    for (const owner of uniqueOwners) {
      if (onlineUsers.has(owner)) {
        //console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${identifier} –æ—Ñ—Ñ–ª–∞–π–Ω -> ${owner}`);
        const target = onlineUsers.get(owner);
        if (target?.socketId) {
          io.to(target.socketId).emit('userOnline', { identifier, isOnline: false });
        }
      }
    }

    console.log(`üî¥ ${identifier} (${userEntry.nickname}) ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å offline (${socket.id})`);
  });


  socket.on('messageAttributeChanged', async (data) => {
    // data: { messageId, attribute, value, sender, receiver }
    const { messageId, attribute, value, sender, receiver } = data;
    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    try {
      const Message = (await import('./models/message.js')).default;
      const msg = await Message.findOne({ messageId });
      let originalSender = msg?.senderId;
      if (!originalSender && receiver) {
        originalSender = receiver;
      }
      if (!msg) {
        console.log(`Fallback to receiver for originalSender: ${originalSender}`);
      }
      if ((value === 'delivered' || value === 'seen') && socket.user?.identifier === originalSender) {
        console.log(`‚ö†Ô∏è Ignoring self-ACK of ${value} for message ${messageId}`);
        return;
      }
      console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', data);
      const now = new Date().toLocaleString();
      const shortId = messageId?.slice(0, 4) || '----';
      console.log(`üì© msg=${shortId} ${sender} ‚û° status=${value} @ ${now}`);
      if (msg) {
        msg.status = value;
        await msg.save();
       // console.log(`–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –Ω–∞ "${value}"`);
      } else {
       // console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.`);
      }
      // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º originalSender)
      const senderEntry = onlineUsers.get(originalSender);
      if (senderEntry && senderEntry.socketId) {
        io.to(senderEntry.socketId).emit('messageAttributeChanged', { messageId, attribute, value, sender });
        console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é ${originalSender}`);
      } else {
        console.log(`–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ${originalSender} –Ω–µ –≤ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        if (!global.statusBuffer) {
          global.statusBuffer = new Map();
        }
        const pendingStatuses = global.statusBuffer.get(originalSender) || [];
        pendingStatuses.push({ messageId, attribute, value, sender, receiver });
        global.statusBuffer.set(originalSender, pendingStatuses);
        console.log(`üóÑÔ∏è –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${originalSender}:`, { messageId, attribute, value });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ:', error);
    }
  });


  socket.on('chatClearedAck', ({ contactId, clearedBy, from }) => {
    //logWebSocketEvent('chatClearedAck_received', { from, contactId, ip: socket.handshake && socket.handshake.address });
    console.log(`üì® chatClearedAck –ø–æ–ª—É—á–µ–Ω –æ—Ç ${from} (–æ—á–∏—â–µ–Ω–æ –¥–ª—è contactId=${contactId})`);
    // –ù–∞–π—Ç–∏ socketId —Ç–æ–≥–æ, –∫—Ç–æ –∏–Ω–∏—Ü–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ (clearedBy), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const target = onlineUsers.get(clearedBy);
    if (target?.socketId) {
      io.to(target.socketId).emit('chatClearedAck', { contactId, from });
    }
  });
  
});



// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (DDoS –∑–∞—â–∏—Ç–∞)
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 10000,
  standardHeaders: true,
  legacyHeaders: false,
});


// WebSocket –æ–±—Ä–∞–±–æ—Ç–∫–∞

// –í—ã–≤–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// app._router.stack.forEach((r) => {
//   if (r.route && r.route.path) {
//     console.log(`–ú–∞—Ä—à—Ä—É—Ç: ${r.route.path} - –ú–µ—Ç–æ–¥—ã: ${Object.keys(r.route.methods)}`);
//   }
// });

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());
app.use(requestLogger);
app.use(cors());
app.use(helmet());

app.use('/api',           apiLimiter);
app.use('/api',           routes);

app.use('/api/auth',      authRoutes);
app.use('/api/contacts',  contactRoutes);
app.use('/api/message',   messageRoutes);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use(notFound);
app.use(errorHandler);

const PORT = process.env.PORT || 5001;
server.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));