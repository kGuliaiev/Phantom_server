import Message from '../models/message.js';
import { v4 as uuidv4 } from 'uuid';
import onlineUsers from '../utils/onlineUsers.js';


export const receiveMessages = async (req, res) => {
  try {
    const { receiverId } = req.query;
    if (!receiverId) {
      return res.status(400).json({ message: 'Receiver ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const messages = await Message.find({
      $or: [{ receiverId }, { senderId: receiverId }],
    }).sort({ createdAt: 1 });

    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è:', receiverId);
    
    await Promise.all(
      messages.map(async (msg) => {
        if (!msg.recipients || !Array.isArray(msg.recipients)) return;
        
        let updated = false;
        msg.recipients = msg.recipients.map(r => {
          if (r.userId.toString() === receiverId && r.status === 'sent') {
            r.status = 'sent';
            updated = true;
          }
          return r;
        });
        
        if (updated) {
          await msg.save();
          
          const shortId = msg.messageId.slice(0, 4);
          const now = new Date().toISOString();
          console.log(`‚úÖ ${shortId} ${msg.senderId} ‚Üí ${msg.receiverId} | —Å—Ç–∞—Ç—É—Å: sent | ${now}`);
        }
      })
    );

    res.json(messages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

export const sendMessage = async (req, res) => {
  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:', req.body);
    const { messageId, senderId, receiverId, chatId, encryptedContent, iv, timestamp } = req.body;
    if (!messageId || !senderId || !receiverId || !chatId || !encryptedContent || !iv || !timestamp) {
      return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    //console.log('üß™ uuidv4 =', uuidv4)
    //const messageId = uuidv4();
    const newMessage = new Message({
      messageId,
      chatId,
      senderId,
      receiverId,
      encryptedContent,
      iv,
      recipients: [
        {
          userId: receiverId,
          status: 'sent',
        },
      ],
    });

      await newMessage.save();
      const io = req.app.get('io');
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
      const senderSocket = onlineUsers.get(senderId);
      if (senderSocket?.socketId) {
        io.to(senderSocket.socketId).emit('messageAttributeChanged', {
          messageId: newMessage.messageId,
          attribute: 'status',
          value: 'sent',
          sender: senderId
        });
        console.log(`‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ sent –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${newMessage.messageId} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é ${senderId}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ onlineUsers
      const target = onlineUsers.get(receiverId);
      if (target?.socketId) {
        console.log('üì® WebSocket emit –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', target.socketId);
        io.to(target.socketId).emit('message', {
          sender: senderId,
          receiver: receiverId,
          encrypted: encryptedContent,
          iv,
          timestamp: newMessage.timestamp,
          messageId: newMessage.messageId
        });
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç', senderId, '->', receiverId, ':', encryptedContent);
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –æ–Ω–ª–∞–π–Ω ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ
        if (!global.messageBuffer) {
          global.messageBuffer = new Map();
        }
        let buffer = global.messageBuffer.get(receiverId) || [];
        buffer.push(newMessage);
        global.messageBuffer.set(receiverId, buffer);
        console.log(`üì• –°–æ–æ–±—â–µ–Ω–∏–µ ${newMessage.messageId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${receiverId}`);
      }
    
      
      // const shortId = messageId.slice(0, 4);
      // const now = new Date().toISOString();
      
     // res.status(201).json({ message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', newMessage: { _id: newMessage._id, messageId: newMessage.messageId, status: 'sent' } });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é clearConversation –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
export const clearConversation = async (req, res) => {
  try {
    const { contactId } = req.query;
    if (!contactId) {
      return res.status(400).json({ message: 'contactId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏' });
    }

    const currentId = req.user.identifier; // –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ middleware

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ–±–º–µ–Ω–µ
    await Message.deleteMany({
      $or: [
        { senderId: currentId, receiverId: contactId },
        { senderId: contactId, receiverId: currentId }
      ]
    });
    console.log(`üóë –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –º–µ–∂–¥—É ${currentId} –∏ ${contactId} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã`);
    
const io = req.app.get('io');
// –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const payload = { initiator: currentId, recipient: contactId };

// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const initiatorSocket = onlineUsers.get(currentId);
if (initiatorSocket?.socketId) {
  io.to(initiatorSocket.socketId).emit('clearServerSuccess', payload);
}
const recipientSocket = onlineUsers.get(contactId);
if (recipientSocket?.socketId) {
  io.to(recipientSocket.socketId).emit('clearServerSuccess', payload);
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –∞–±–æ–Ω–µ–Ω—Ç–∞ B
  io.to(recipientSocket.socketId).emit('chatClearRemote', { contactId: currentId });
  console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ chatClearRemote –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${contactId} —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞: ${currentId}`);
} else {
  let pendingEvents;
  try {
    pendingEvents = require('../utils/pendingEvents.js').default;
  } catch (e) {
    pendingEvents = {};
  }
  pendingEvents[contactId] = { contactId: currentId };
  console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${contactId}`);
}

    return res.status(200).json({ message: '–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:', error);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏' });
  }
};