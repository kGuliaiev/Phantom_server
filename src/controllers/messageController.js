import Message from '../models/message.js';
import { v4 as uuidv4 } from 'uuid';
import { onlineUsers } from '../utils/onlineUsers.js';


export const receiveMessages = async (req, res) => {
  try {
    const { receiverId } = req.query;
    if (!receiverId) {
      return res.status(400).json({ message: 'Receiver ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const messages = await Message.find({
      $or: [{ receiverId }, { senderId: receiverId }],
    }).sort({ createdAt: 1 });

    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è:', receiverId);
    console.log('üì¶ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ:', messages.length);
    await Promise.all(
      messages.map(async (msg) => {
        if (!msg.recipients || !Array.isArray(msg.recipients)) return;
        
        let updated = false;
        msg.recipients = msg.recipients.map(r => {
          if (r.userId.toString() === receiverId && r.status === 'sent') {
            r.status = 'delivered';
            updated = true;
          }
          return r;
        });
        
        if (updated) {
          await msg.save();
          console.log('‚úèÔ∏è –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è', msg.messageId, '–æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ delivered');
        }
      })
    );

    res.json(messages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

export const sendMessage = async (req, res) => {
  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:', req.body);
    const { senderId, receiverId, chatId, encryptedContent, iv } = req.body;
    if (!senderId || !receiverId || !chatId || !encryptedContent || !iv) {
      return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log('üß™ uuidv4 =', uuidv4)
    const messageId = uuidv4();
    const newMessage = new Message({
      messageId,
      chatId,
      senderId,
      receiverId,
      encryptedContent,
      iv,
      recipients: [
        {
          userId: receiverId,
          status: 'sent',
        },
      ],
    });

    await newMessage.save();
    const io = req.app.get('io');
    const target = onlineUsers.get(receiverId);
    if (target?.socketId) {
      console.log('üì® WebSocket emit –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', target.socketId);
      io.to(target.socketId).emit('message', {
        sender: senderId,
        encrypted: encryptedContent,
        iv,
        timestamp: newMessage.timestamp,
        messageId: newMessage.messageId
      });
    }
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', newMessage);
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç', senderId, '->', receiverId, ':', encryptedContent);
    res.status(201).json({ message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', newMessage: { _id: newMessage._id, messageId: newMessage.messageId, status: 'sent' } });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


 // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é clearConversation –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
export const clearConversation = async (req, res) => {
  try {
    const { contactId } = req.query;
    if (!contactId) {
      return res.status(400).json({ message: 'contactId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏' });
    }

    const currentId = req.user.identifier; // –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ middleware

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ–±–º–µ–Ω–µ
    await Message.deleteMany({
      $or: [
        { senderId: currentId, receiverId: contactId },
        { senderId: contactId, receiverId: currentId }
      ]
    });
    console.log(`üóë –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –º–µ–∂–¥—É ${currentId} –∏ ${contactId} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∏ —Ä–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ clearChat –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const io = req.app.get('io');
    io.emit('chatCleared', { contactId, clearedBy: currentId });

    return res.status(200).json({ message: '–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:', error);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏' });
  }
};