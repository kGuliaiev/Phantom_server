// src/controllers/authController.js
import User from '../models/users.js';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import crypto from 'crypto';

// –§—É–Ω–∫—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Base64
const toBase64 = (str) => Buffer.from(str, 'utf-8').toString('base64');

// üîê –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ base64
const isBase64 = (str) => {
    return typeof str === 'string' && /^[A-Za-z0-9+/=]+$/.test(str) && str.length % 4 === 0;
  };
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª—é—á–∞–º–∏
  export const registerUser = async (req, res) => {
    try {
      const { username, password, identifier, publicKey, identityKey, signedPreKey, oneTimePreKeys } = req.body;
  
      console.log('\nüìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        username,
        identifier,
        publicKey,
        identityKey,
        signedPreKey,
        oneTimePreKeys: Array.isArray(oneTimePreKeys) ? oneTimePreKeys.length : '–Ω–µ –º–∞—Å—Å–∏–≤'
      });
  
      if (!username || !password || !identifier || !publicKey || !identityKey || !signedPreKey || !oneTimePreKeys) {
        console.log('‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥–∞–Ω—ã');
        return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
      }
  
      if (!isBase64(identityKey)) {
        console.log('‚ùå –§–æ—Ä–º–∞—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª—é—á–µ–π –Ω–µ–≤–µ—Ä–µ–Ω (–Ω–µ Base64)');
        return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç identityKey (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Base64)' });
      }
  
      if (!Array.isArray(oneTimePreKeys) || oneTimePreKeys.length === 0) {
        console.log('‚ùå –§–æ—Ä–º–∞—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∫–ª—é—á–µ–π –Ω–µ–≤–µ—Ä–µ–Ω');
        return res.status(400).json({ message: 'oneTimePreKeys –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å –∫–ª—é—á–∞–º–∏' });
      }
  
      const existingUsername = await User.findOne({ username });
      if (existingUsername) {
        console.log('‚ö†Ô∏è Username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', username);
        return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }
  
      const existingIdentifier = await User.findOne({ identifier });
      if (existingIdentifier) {
        console.log('‚ö†Ô∏è Identifier —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:', identifier);
        return res.status(409).json({ message: '–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
      }
  
      console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è:', username);
      const hashedPassword = await bcrypt.hash(password, 10);
      console.log('‚úÖ –•–µ—à –ø–∞—Ä–æ–ª—è –ø–æ–ª—É—á–µ–Ω');
  
      const newUser = new User({
        username,
        password: hashedPassword,
        identifier,
        publicKey,
        identityKey,
        signedPreKey,
        oneTimePreKeys,
        lastSeen: new Date(),
      });
  
      await newUser.save();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
  
      res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
    } catch (error) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  };


// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (login)
export const loginUser = async (req, res) => {
  const { username, password } = req.body;

  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:');
  console.log('Username:', username);
  console.log('Password (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π):', password);

  try {
    const user = await User.findOne({ username });

    if (!user) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');

    const isMatch = await bcrypt.compare(password, user.password);

    console.log('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ bcrypt:', isMatch);

    if (!isMatch) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
      expiresIn: '7d'
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã–¥–∞—ë—Ç—Å—è —Ç–æ–∫–µ–Ω.');

    res.json({
      token,
      userId: user._id,
      username: user.username
    });
  } catch (err) {
    console.log('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', err.message);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', error: err.message });
  }
};

// –ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
export const resetPasswordRequest = async (req, res) => {
    try {
        const { username } = req.body;
        const user = await User.findOne({ username });

        if (!user) {
            console.error('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (6 —Ü–∏—Ñ—Ä)
        const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
        const resetCodeHash = crypto.createHash('sha256').update(resetCode).digest('hex');
        await User.updateOne(
            { username },
            {
                resetCode: resetCodeHash,
                resetCodeExpires: Date.now() + 15 * 60 * 1000,
            }
        );

        console.log(`–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${resetCode}`);

        res.json({ message: '–ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è' });
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
export const resetPassword = async (req, res) => {
    try {
        const { username, resetCode, newPassword } = req.body;
        const user = await User.findOne({ username });

        if (!user || user.resetCodeExpires < Date.now()) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥' });
        }
        const resetCodeHash = crypto.createHash('sha256').update(resetCode).digest('hex');
        if (user.resetCode !== resetCodeHash) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–±—Ä–æ—Å–∞' });
        }

        user.password = await bcrypt.hash(newPassword, 10);
        user.resetCode = undefined;
        user.resetCodeExpires = undefined;
        await user.save();

        res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è' });
    }
};

// –í–∫–ª—é—á–µ–Ω–∏–µ 2FA (OTP-–∫–æ–¥)
export const enable2FA = async (req, res) => {
    try {
        const user = await User.findById(req.user.userId);
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è Google Authenticator
        user.twoFactorSecret = crypto.randomBytes(10).toString('hex');
        user.twoFactorEnabled = true;
        await user.save();

        res.json({ message: '2FA –≤–∫–ª—é—á–µ–Ω–∞', secret: user.twoFactorSecret });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ 2FA' });
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –ø—Ä–∏ –≤—Ö–æ–¥–µ
export const verify2FA = async (req, res) => {
    try {
        const { username, otp } = req.body;
        const user = await User.findOne({ username });

        if (!user || !user.twoFactorEnabled) {
            return res.status(400).json({ message: '2FA –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
        }

        if (otp !== user.twoFactorSecret) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA' });
        }

        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });
        res.json({ message: '2FA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', token });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA' });
    }
};

export const generateUniqueIdentifier = (req, res) => {
    const uniqueId = 'id_' + Date.now() + '_' + Math.floor(Math.random() * 10000);
    res.json({ identifier: uniqueId });
  };


  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const deleteUserCompletely = async (req, res) => {
    const { username } = req.params;
    try {
      await Promise.all([
        User.deleteOne({ username }),
        Chat.deleteMany({ $or: [{ senderId: username }, { receiverId: username }] }),
        Message.deleteMany({ $or: [{ senderId: username }, { receiverId: username }] }),
        Status.deleteMany({ userId: username }),
      ]);
      res.status(200).json({ message: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
    }
  };