import express from 'express';
import Message from '../models/message.js';
import onlineUsers from '../utils/onlineUsers.js';

export const handleConnection = (socket) => {
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.on('sendMessage', async (data) => {
        console.log(`sendMessage -> –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${socket.id}:`, data);

        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const newMessage = new Message({
                messageId:          data.messageId,
                chatId:             data.chatId,
                senderId:           data.senderId,
                encryptedContent:   data.encryptedContent,
                iv:                 data.iv,
                recipients: data.recipients.map(userId => ({
                    userId,
                    status: 'sent'
                }))
            });

            await newMessage.save();
            // Immediately dispatch 'messagesUpdated' event in browser
            if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function') {
              window.dispatchEvent(new CustomEvent('messagesUpdated'));
            }
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ messageAttributeChanged
            socket.emit('messageAttributeChanged', {
              messageId: newMessage.messageId,
              attribute: 'status',
              value: 'sent',
              sender: data.senderId
            });

            
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'sent' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${newMessage.messageId} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é ${data.senderId}`);
            console.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è ${newMessage.messageId} –ø–æ–ª—É—á–∞—Ç–µ–ª—é:`, data.recipients);
            const io = socket.server;
            for (const userId of data.recipients) {
              const recipientEntry = onlineUsers.get(userId);
              if (recipientEntry?.socketId) {
                io.to(recipientEntry.socketId).emit('receiveMessage', data);
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${newMessage.messageId} –ø–æ–ª—É—á–∞—Ç–µ–ª—é ${userId}`);
              } else {
                console.log(`‚ö†Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${userId} –Ω–µ –≤ —Å–µ—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ ${newMessage.messageId} –±—É—Ñ–µ—Ä–∏–∑—É–µ—Ç—Å—è`);
              }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('updateMessageStatus', async (data) => {
      console.log(`‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${data.messageId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.userId}: ${data.status}`);
      try {
        const result = await Message.updateOne(
          { messageId: data.messageId, "recipients.userId": data.userId },
          { $set: { "recipients.$.status": data.status } }
        );
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è ${data.messageId} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –Ω–∞ "${data.status}"`);
        if (data.status === 'delivered') {
          // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
          const msg = await Message.findOne({ messageId: data.messageId });
          const io = socket.server;
          const senderEntry = onlineUsers.get(msg.senderId);
          if (senderEntry?.socketId) {
            io.to(senderEntry.socketId).emit('messageAttributeChanged', {
              messageId: data.messageId,
              attribute: 'status',
              value: 'delivered',
              sender: msg.senderId
            });
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'delivered' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${data.messageId} –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é ${msg.senderId}`);
          } else {
            console.log(`‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ${msg.senderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å–µ—Ç–∏`);
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('disconnect', () => {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    });

    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è 'chatClearedAck'
    socket.on('chatClearedAck', ({ contactId, from }) => {
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ ${contactId}`);
    });
};

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
export const updateMessageStatusRoute = async (req, res) => {
    const { messageId, userId, status } = req.body;

    try {
        const message = await Message.findOneAndUpdate(
            { messageId, "recipients.userId": userId },
            { $set: { "recipients.$.status": status } },
            { new: true }
        );

        if (!message) {
            return res.status(404).json({ message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        res.status(200).json({ message: '–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω', updatedMessage: message });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' });
    }
};

export default { handleConnection, updateMessageStatusRoute };
