// contactController.js
import Contact from '../models/contact.js';
import User from '../models/users.js';

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞)
export const getContacts = async (req, res) => {
  const { tokenUser, identifier } = req.body;
  console.log("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", identifier);

  if (!identifier) {
    return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞' });
  }


  if (!req.user || req.user.identifier !== identifier) {
    console.warn("‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", {
      tokenUser: req.user,
      requestIdentifier: identifier
    });


    return res.status(403).json({
      message: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞',
      tokenUser: req.user,
      requestIdentifier: identifier
    });
  }


  try {
    const contacts = await Contact.find({ owner: identifier })
      .sort({ nickname: 1 })
      .select('contactId nickname publicKey -_id');

    console.log("üìí –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:", contacts.length);
    res.status(200).json(contacts);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', error: err.message });
  }
};

// ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
export const addContact = async (req, res) => {
  const { owner, contactId, nickname } = req.body;

   if (!owner || !contactId) {
     return res.status(400).json({ message: 'owner –∏ contactId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
   }
  
   if (owner === contactId) {
     return res.status(400).json({ message: '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã' });
   }

  try {
    const existing = await Contact.findOne({ owner, contactId });
    if (existing) {
      return res.status(409).json({ message: '–ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω' });
    }

    const user = await User.findOne({ identifier: contactId });
    if (!user || !user.publicKey) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞' });
    }

    const newContact = new Contact({ owner, contactId, nickname, publicKey: user.publicKey });
    await newContact.save();

    const contacts = await Contact.find({ owner })
      .sort({ nickname: 1 })
      .select('contactId nickname publicKey -_id');

    res.status(201).json({ message: '–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω', contacts });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞', error: err.message });
  }
};

// ‚úÖ –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
export const deleteContact = async (req, res) => {
  const { owner, contactId } = req.params;
  try {
    await Contact.deleteOne({ owner, contactId });
    const updated = await Contact.find({ owner })
      .sort({ nickname: 1 })
      .select('contactId nickname publicKey -_id');
    res.status(200).json(updated);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞' });
  }
};
