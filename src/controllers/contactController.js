import Contact from '../models/contact.js';
import User from '../models/users.js';

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞)
export const getContacts = async (req, res) => {
  const { tokenUser, identifier } = req.body;
  console.log("üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", identifier);

  if (!identifier) {
    return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞' });
  }

  if (!req.user || req.user.identifier !== identifier) {
    console.warn("‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", {
      tokenUser: req.user,
      requestIdentifier: identifier
    });
    return res.status(403).json({
      message: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞',
      tokenUser: req.user,
      requestIdentifier: identifier
    });
  }

  try {
    const contacts = await Contact.find({ owner: identifier })
      .sort({ nickname: 1 })
      .select('contactId nickname publicKey status introduction -_id');

    console.log("üìí –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:", contacts.length);
    res.status(200).json(contacts);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', error: err.message });
  }
};

// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ)
// –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ 'pending'
export const addContact = async (req, res) => {
  const { owner, contactId, nickname, introduction } = req.body;

  if (!owner || !contactId) {
    return res.status(400).json({ message: 'owner –∏ contactId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  if (owner === contactId) {
    return res.status(400).json({ message: '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã' });
  }

  try {
    const existing = await Contact.findOne({ owner, contactId });
    if (existing) {
      return res.status(409).json({ message: '–ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω' });
    }

    const user = await User.findOne({ identifier: contactId });
    if (!user || !user.publicKey) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞' });
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç 'pending', –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    const newContact = new Contact({ 
      owner, 
      contactId, 
      nickname, 
      publicKey: user.publicKey,
      status: 'pending',
      introduction: introduction || ''
    });
    await newContact.save();

    const contacts = await Contact.find({ owner })
      .sort({ nickname: 1 })
      .select('contactId nickname publicKey status introduction -_id');

    res.status(201).json({ message: '–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω', contacts });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞', error: err.message });
  }
};

// –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
export const deleteContact = async (req, res) => {
  const { owner, contactId } = req.params;
  try {
    await Contact.deleteOne({ owner, contactId });
    const updated = await Contact.find({ owner })
      .sort({ nickname: 1 })
      .select('contactId nickname publicKey status introduction -_id');
    res.status(200).json(updated);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞' });
  }
};

// –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã
export const respondContact = async (req, res) => {
  const { owner, contactId, action } = req.body; // owner = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–ª—É—á–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å (Z), contactId = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å (A)
  if (!owner || !contactId || !action) {
    return res.status(400).json({ message: 'owner, contactId –∏ action –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  if (!['accept', 'decline', 'block'].includes(action)) {
    return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ action' });
  }
  
  try {
    const contactEntry = await Contact.findOne({ owner, contactId });
    if (!contactEntry) {
      return res.status(404).json({ message: '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  
    if (action === 'accept') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ accepted –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Z
      contactEntry.status = 'accepted';
      await contactEntry.save();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è A
      let reverseEntry = await Contact.findOne({ owner: contactId, contactId: owner });
      if (!reverseEntry) {
        reverseEntry = new Contact({
          owner: contactId,
          contactId: owner,
          nickname: '',  // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è nickname
          publicKey: '', // –µ—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∏–∑–≤–µ—Å—Ç–µ–Ω, –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ
          status: 'accepted'
        });
      } else {
        reverseEntry.status = 'accepted';
      }
      await reverseEntry.save();
      return res.json({ message: '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è' });
    } else if (action === 'decline') {
      // –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ ‚Äì —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞
      await Contact.deleteOne({ owner, contactId });
      return res.json({ message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω' });
    } else if (action === 'block') {
      // –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ blocked
      contactEntry.status = 'blocked';
      await contactEntry.save();
      return res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
    }
  } catch (error) {
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', error: error.message });
  }
};